version: "3.7"
x-extra_hosts:
  # This is added so that within each service you can communicate to another service by using the DNS name of pi rather
  # than using IP address. Makes it easy if the IP address changes. For example, when configuring Radarr, you can
  # configure the transmission client url as http://pi:9091
  &pi
  # Change this to IP of your RPi
  - "pi:10.0.0.9"
services:
  # All the services use docker bind mounts to store config data and media on the host's filesystem. If you're familiar with
  # docker storage, you can use whatever you want. You can change it to use docker volumes if you want.
  # I have my external HDD mounted as /mnt/media. Hence all the bind mounts use /mnt/media as the root. If you want
  # to use a different directory for bind mount, you can do that by modifying the bind mounts under volumes section of
  # a service.
  #
  # Nearly all the containers can be run as non root. This is controlled by PUID and PGID environment variables.
  # Make sure any volume directories on the host are owned by the same user you specify to run the container as. Else
  # you may have permissions issues.
  #
  # If you dont want any service, you can delete that section. Alternatively, if you want to use another service or
  # add more services, you can add/change them in this file.
  # For example: if you want to use Emby instead of Plex, you can change the plex service to emby. Linuxserver.io
  # provide most of the docker images that you would need. They provide a docker image for emby as well.
  #
  # Each services runs on a different port number. Plex and transmission-openvpn uses host networking mode whereas all
  # the other services use docker bridge networking and have host ports mapped to container ports. For these you can
  # change the mapping between host ports and container ports. Port mapping is in the format <host_port>:<container_port>
  plex:
    image: linuxserver/plex:latest
    restart: always
    container_name: plex
    network_mode: host
    extra_hosts: *pi
    # NOTE: Please delete this entire `devices` section if your device does not have /dev/dri device. If you using something
    # like RPi3, you would need to delete this section else you will get an error when trying to run this container.
    devices:
      # This basically mounts the GPU device on the host to the container, needed for hardware transcoding.
      # For a RPi 4 this won't do anything as plex does not support transcoding on anything other than Intel quicksync.
      # You can comment or delete this if you want. Leaving it as it is won't do any harm.
      - "/dev/dri:/dev/dri"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
    volumes:
      # Docker bind mounts are used to store config and media on the host's filesystem. Config for plex will be stored
      # in /mnt/media/appdata/plex/config directory and any transcoding data is stored in a transcode directory
      - /mnt/media/appdata/plex/config:/config
      - /mnt/media/appdata/plex/transcode:/transcode
      # Within plex, we are mounting the root of /mnt/media to /all_media directory. So within plex, when you look
      # inside /all_media directory you would see the same file structure as /mnt/media on the host
      - /mnt/media:/all_media

  transmission-openvpn:
    # This is the only image that is not multi-arch. If you have to run this image on different platform you would need
    # to change the image tag.
    # Uncomment this line if you are not using Raspberry Pi and then comment the other image line. More images can be
    # found at https://hub.docker.com/r/haugene/transmission-openvpn/tags
    image: haugene/transmission-openvpn:latest
    #image: haugene/transmission-openvpn:latest-armhf
    restart: always
    container_name: transmission-openvpn
    network_mode: host
    extra_hosts: *pi
    env_file:
      - transmission_login.env
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
      # To run this container, you would need an openvpn provider. I use IPVANISH and hence in here that is used as an
      # example. Please look at the documentation to understand each of the config variables.
      # Documentation: https://haugene.github.io/docker-transmission-openvpn/
      - TRANSMISSION_WEB_UI=transmission-web-control
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60
      - LOCAL_NETWORK=10.0.0.0/24
      - OPENVPN_PROVIDER=NORDVPN
      - CREATE_TUN_DEVICE=true
      # Change these to which vpn endpoints you want to connect to. More info in documentation
#      - OPENVPN_CONFIG=ipvanish-UK-London-lon-a05,ipvanish-UK-London-lon-a33,ipvanish-UK-Manchester-man-c06,ipvanish-NL-Amsterdam-ams-a08
#      - OPENVPN_CONFIG=UK London
      # Below are just some variable to configure transmission. Configure them to whatever is best for your setup
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=5
      - TRANSMISSION_IDLE_SEEDING_LIMIT=30
      - TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED=true
      - TRANSMISSION_RATIO_LIMIT=2
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_SEED_QUEUE_ENABLED=true
      - TRANSMISSION_SEED_QUEUE_SIZE=50
    cap_add:
      - NET_ADMIN
    volumes:
      # Docker bind mounts used to mount host's filesystem within the container
      # Transmission config will be stored in a transmission-openvpn directory
      - /mnt/media/appdata/transmission-openvpn:/config
      # All the media managed by transmission with be stored in /mnt/media/downloads directory on the host BUT the
      # transmission will see that as /data directory
      - /mnt/media/downloads:/data
  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /mnt/media/appdata/nzbget:/config
      - /mnt/media/downloads:/downloads
    ports:
      - 6789:6789
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett:latest
    restart: always
    container_name: jackett
    extra_hosts: *pi
    ports:
      # Host port 9117 is mapped to container port 9117
      - "9117:9117"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /mnt/media/appdata/jackett:/config
      - /mnt/media/downloads:/downloads

  radarr:
    build:
        context: ./radarr_sma
        dockerfile: Dockerfile
    restart: always
    container_name: radarr
    extra_hosts: *pi
    ports:
      # Host port 7878 is mapped to container port 7878
      - "7878:7878"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      # Radarr needs to know where the downloaded media is. This is told to radarr by transmission
      - /mnt/media/downloads:/downloads
      - /mnt/media/downloads:/data
      # config directory
      - /mnt/media/appdata/radarr:/config
      - /mnt/media/appdata/sma:/usr/local/sma/config
      # Movies imported by radarr are stored in /mnt/media/movies directory on the host. Radarr sees this directory
      # as /movies. Within radarr make your root folder as /movies
      - /mnt/media/movies:/movies

  sonarr:
    build:
        context: ./sonarr_sma
        dockerfile: Dockerfile  
    restart: always
    container_name: sonarr
    extra_hosts: *pi
    ports:
      # Host port 8989 is mapped to container port 8989
      - "8989:8989"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      # sonarr needs to know where the downloaded media is. This is told to sonarr by transmission
      - /mnt/media/downloads:/downloads
      - /mnt/media/downloads:/data
      # config directory
      - /mnt/media/appdata/sonarr:/config
      - /mnt/media/appdata/sma:/usr/local/sma/config
      # TV shows imported by sonarr are stored in /mnt/media/tv_shows directory on the host. sonarr sees this directory
      # as /tv. Within sonarr make your root folder as /tv
      - /mnt/media/tv_shows:/tv
  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
#      - BASE_URL=/ombi #optional
    volumes:
      - /mnt/media/appdata/ombi:/config
    ports:
      - 3579:3579
    restart: unless-stopped
    
  tautulli:
    image: linuxserver/tautulli:latest
    restart: always
    container_name: tautulli
    extra_hosts: *pi
    ports:
      # Host port 8181 is mapped to container port 8181
      - "8181:8181"
    environment:
      # The container is run as the user with this PUID and PGID (user and group id).
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      # config directory
      - /mnt/media/appdata/tautulli:/config
      # Tautulli needs access to plex logs. In the plex container we mounted /mnt/media/appdata/plex of the host as the
      # config directory for plex. Logs are located within this config directory
      - /mnt/media/appdata/plex/config/Library/Application Support/Plex Media Server/Logs:/logs

